.. _react-native-create-objects:
.. _react-native-create-a-new-object:

=================================
CRUD - Create - React Native SDK
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Create a New Object
-------------------

To add a new Realm object to a realm instance, use :js-sdk:`realm.create()
<Realm.html#create>` inside of a write transaction. If the
:ref:`schema <react-native-realm-schema>` includes the object type and the
object conforms to the schema, then Realm stores the object.

The example for creating an object uses the following schema:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Person.snippet.ts-person-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/Person.snippet.js-person-schema.js
         :language: javascript

In the following example of a ``CreatePersonInput`` component, we:

#. Get access to an opened realm instance by calling the ``useRealm()`` hook within the component. 
#. Create a component method ``handleAddPerson()`` that performs a :ref:`write transaction <react-native-write-transactions>`, and creates a new ``Person`` :js-sdk:`object <Realm.Object.html>` based on the TextInput value.
#. Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the submit button that calls ``handleAddPerson()``. 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/create-test.snippet.crud-create-object.tsx
        :language: typescript
        :emphasize-lines: 3, 6-8
        :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/create-test.snippet.crud-create-object.jsx
         :language: javascript
         :emphasize-lines: 3, 6-8
         :linenos:

Create an Object with a To-One Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In a one-to-one relationship, an object is related to at most one other object of a particular type.
To learn more about one-to-one relationships, refer to to :ref:`Relationships & Embedded
Objects - React Native SDK <react-native-to-one-relationship>`.

To represent a to-one relationship, we will use the following schema to indicate that a Pet Owner
may only own one Pet: 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/PetOwner.snippet.ts-petowner-schema.ts
         :language: typescript

      .. literalinclude:: /examples/generated/react-native/ts/Pet.snippet.ts-pet-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/PetOwner.snippet.js-petowner-schema.js
         :language: javascript

      .. literalinclude:: /examples/generated/react-native/js/Pet.snippet.js-pet-schema.js
         :language: javascript


To create an object with a to-one relationship to another object, we: 

#. Create a new Pet object within a :ref:`write transaction <react-native-write-transactions>` by calling the ``create()`` method on our realm instance. 
#. Capture our newly created Pet object in a ``newPet`` variable using the :ref:`@realm/react useObject() hook <react-native-use-object-hook>`. 
#. Create a new PetOwner object and pass ``newPet`` to the ``pet`` property.
#. Wrap our two write transactions in a ``handleAddPetOwner()`` function, which creates a new ``PetOwner`` :js-sdk:`object <Realm.Object.html>` with an associated ``Pet`` based on the TextInput value.
#. Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the submit button that calls ``handleAddPetOwner()``. 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/create-test.snippet.crud-create-object.tsx
        :language: typescript
        :emphasize-lines: 3, 6-8
        :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/create-test.snippet.crud-create-object.jsx
         :language: javascript
         :emphasize-lines: 3, 6-8
         :linenos:

Create an Object with a To-Many Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In a one-to-many relationship, an object may be related to multiple objects of a particular type.
To learn more about one-to-many relationships, refer to to :ref:`Relationships & Embedded
Objects - React Native SDK <react-native-to-many-relationship>`.

To represent a to-many relationship, we will use the following schema to indicate that a Company
may employ multiple Employees:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/PetOwner.snippet.ts-petowner-schema.ts
         :language: typescript

      .. literalinclude:: /examples/generated/react-native/ts/Pet.snippet.ts-pet-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/PetOwner.snippet.js-petowner-schema.js
         :language: javascript

      .. literalinclude:: /examples/generated/react-native/js/Pet.snippet.js-pet-schema.js
         :language: javascript


To create an object with a to-many relationship to another object, we: 

#. Capture our current collection of Employee objects by calling the :ref:`@realm/react useQuery() hook <react-native-use-query-hook>` on the ``Employee`` object type.
#. Create a new Company object within a :ref:`write transaction <react-native-write-transactions>` and pass our collection of employees to the ``employees`` property.
#. Create a component method, ``handleAddEmployee()``, that creates a new Employee object. The ``useQuery()`` automatically handles adding this new employee to our captured collection of ``Employees``.
#. Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the submit button that calls ``handleAddEmployee()``. 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/create-test.snippet.crud-create-object.tsx
        :language: typescript
        :emphasize-lines: 3, 6-8
        :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/create-test.snippet.crud-create-object.jsx
         :language: javascript
         :emphasize-lines: 3, 6-8
         :linenos:

Create an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

An embedded object is an object that exists as data nested inside of a parent object; it cannot exist as an
independent Realm object. To learn more about embedded objects, refer to to :ref:`Relationships & Embedded
Objects - React Native SDK <react-native-embedded-objects>`.

To represent an embedded object, we will use the following schema that allows you to embed a single
Address into a new Contact object:

.. tabs-realm-languages::

    .. tab::
       :tabid: typescript

       .. literalinclude:: /examples/generated/react-native/ts/Address.snippet.ts-address-schema.ts
          :language: typescript
          :emphasize-lines: 9
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Contact.snippet.ts-contact-schema.ts
          :language: typescript
          :emphasize-lines: 13
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Business.snippet.ts-business-schema.ts
          :language: typescript
          :emphasize-lines: 12
          :linenos:

    .. tab::
       :tabid: javascript

       .. literalinclude:: /examples/generated/react-native/js/Address.snippet.js-address-schema.js
          :language: javascript
          :emphasize-lines: 4
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Contact.snippet.js-contact-schema.js
          :language: javascript
          :emphasize-lines: 9
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Business.snippet.js-business-schema.js
          :language: javascript
          :emphasize-lines: 9
          :linenos:

To create an embedded object, assign an instance of the embedded object to a parent object's property.

In the following ``CreateContact`` example, we create a new ``Contact`` object 
with an embedded ``Address`` object.

The ``CreateContact`` component does the following:

#. Creates React `state <https://react.dev/reference/react/Component#state>`__ variables that represent the contact's name and address details.
#. Gets access to an open realm instance by calling the ``useRealm()`` hook within the component.
#. Creates a component method ``submitContact()`` that performs a write transaction to create a new ``Address`` embedded object and ``Contact`` parent object based on the ``TextInput`` values for the contact's name and address.
#. Adds an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the "Submit Contact" button that calls ``submitContact()``.

.. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.create-embedded-object.tsx
   :language: typescript
   :emphasize-lines: 13-25
   :linenos:

Create an Asymmetric Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~

An asymmetric object allows you to sync a collection unidirectionally from your decive to your Atlas database, if
you are using Flexible Sync. To learn more about asymmetric objects, refer to to :ref:`Stream Data to Atlas 
- React Native SDK <react-native-stream-data-to-atlas>`.

To represent an asymmetric object, we will use the following schema that defines a Weather Sensor object for
sending weather-related data one-way from your device to your Atlas database:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/data-ingest.test.snippet.data-ingest-object.jsx 
         :language: javascript
         :emphasize-lines: 6

   .. tab::
      :tabid: typescript

      .. literalinclude::  /examples/generated/react-native/ts/data-ingest.test.snippet.data-ingest-object.tsx 
         :language: typescript
         :emphasize-lines: 12

You can create an asymmetric object inside a write transaction using :js-sdk:`Realm.create() <Realm.html#create>`.
When creating an asymmetric object, ``Realm.create()`` returns ``undefined`` rather than the object itself.

.. literalinclude:: /examples/generated/react-native/ts/data-ingest.test.snippet.write-data-ingest-object.tsx
   :language: typescript
